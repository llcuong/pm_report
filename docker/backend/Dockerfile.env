# ===== Stage 1: build wheels =====
FROM python:3.13-slim-bookworm AS wheels
ENV DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1
WORKDIR /src
RUN set -eux; \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*; \
    . /etc/os-release; codename="${VERSION_CODENAME:-bookworm}"; \
    printf 'deb https://deb.debian.org/debian %s main\n' "$codename" >  /etc/apt/sources.list; \
    printf 'deb https://deb.debian.org/debian %s-updates main\n' "$codename" >> /etc/apt/sources.list; \
    printf 'deb https://security.debian.org/debian-security %s-security main\n' "$codename" >> /etc/apt/sources.list; \
    echo 'Acquire::Retries "5";' > /etc/apt/apt.conf.d/80retries; \
    printf 'Acquire::http::No-Cache "true";\nAcquire::https::No-Cache "true";\nAcquire::PDiffs "false";\nAcquire::CompressionTypes::Order:: "gz";\n' \
      > /etc/apt/apt.conf.d/99nocache; \
    apt-get update -o Acquire::Check-Valid-Until=false; \
    apt-get install -y --no-install-recommends build-essential unixodbc-dev; \
    rm -rf /var/lib/apt/lists/*
COPY backend/requirements.txt .
RUN python -m pip install --upgrade pip \
 && mkdir -p /wheels \
 && pip wheel --wheel-dir /wheels -r requirements.txt

# ===== Stage 2: create venv & install deps from wheels =====
FROM python:3.13-slim-bookworm AS env
ENV VIRTUAL_ENV=/opt/venv \
    PIP_NO_CACHE_DIR=1 PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1
RUN python -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
WORKDIR /src
COPY backend/requirements.txt .
COPY --from=wheels /wheels /wheels
RUN python -m pip install --upgrade pip \
 && pip install --no-index --find-links=/wheels -r requirements.txt \
 && python - <<'PY'
import importlib.util, sys
assert importlib.util.find_spec('pyodbc') is not None, "pyodbc not installed to venv"
print("pyodbc wheel present in venv (import deferred)")
PY

# ===== Stage 3: runtime (fail fast, no bypass) =====
FROM python:3.13-slim-bookworm AS runtime
ARG LD_LIBRARY_PATH=""
ENV DEBIAN_FRONTEND=noninteractive \
    PATH="/opt/venv/bin:$PATH" \
    LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}" \
    PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1
WORKDIR /app

RUN set -eux; \
  rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*; \
  . /etc/os-release; codename="${VERSION_CODENAME:-bookworm}"; \
  printf 'deb https://deb.debian.org/debian %s main\n' "$codename" >  /etc/apt/sources.list; \
  printf 'deb https://deb.debian.org/debian %s-updates main\n' "$codename" >> /etc/apt/sources.list; \
  printf 'deb https://security.debian.org/debian-security %s-security main\n' "$codename" >> /etc/apt/sources.list; \
  echo 'Acquire::Retries "5";' > /etc/apt/apt.conf.d/80retries; \
  printf 'Acquire::http::No-Cache "true";\nAcquire::https::No-Cache "true";\nAcquire::PDiffs "false";\n' > /etc/apt/apt.conf.d/99nocache; \
  ok=0; \
  for i in 1 2 3; do \
    echo "APT try $i: update + install core packages..."; \
    apt-get update -o Acquire::Check-Valid-Until=false -o Acquire::AllowReleaseInfoChange=true; \
    if apt-get install -y --no-install-recommends unixodbc odbcinst1debian2 curl ca-certificates gnupg lsb-release; then ok=1; break; fi; \
    echo "APT retry $i failed, sleeping 5s..."; sleep 5; \
  done; \
  test "$ok" = 1 || (echo 'ERROR: core apt-get install failed after retries' >&2; exit 1)

RUN set -eux; \
  install -m 0755 -d /etc/apt/keyrings; \
  curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /etc/apt/keyrings/microsoft.gpg; \
  echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/debian/12/prod ${VERSION_CODENAME:-bookworm} main" > /etc/apt/sources.list.d/mssql-release.list; \
  apt-get update -o Acquire::Check-Valid-Until=false -o Acquire::AllowReleaseInfoChange=true

RUN set -eux; \
  echo "Installing msodbcsql18 (ACCEPT_EULA=Y) ..."; \
  ACCEPT_EULA=Y apt-get install -y --no-install-recommends msodbcsql18; \
  echo "msodbcsql18 installed successfully"

RUN set -eux; \
  if [ ! -e /usr/lib/x86_64-linux-gnu/libodbc.so.2 ] && [ -e /usr/lib/x86_64-linux-gnu/libodbc.so.2.0.0 ]; then \
    ln -s /usr/lib/x86_64-linux-gnu/libodbc.so.2.0.0 /usr/lib/x86_64-linux-gnu/libodbc.so.2; \
  fi

COPY --from=env /opt/venv /opt/venv

RUN useradd -m appuser
USER appuser

COPY --chown=appuser:appuser backend/ /app/

EXPOSE 17500

CMD ["/bin/sh","-lc","python manage.py runserver 0.0.0.0:17500"]
